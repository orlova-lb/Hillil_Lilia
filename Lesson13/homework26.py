"""
Написати функціональні сортировки двомірного списка МхМ (матриці) Значення М - задає користувачеві, з клавіатури. 5.
Може бути будь-яким цілим, позитивним числом, більше 5. Функція должна:

знайти сумму елементами стілбцов і відстертіти стільці по возрастанию цих сум
відстежувати кожен нечіткий стілець по возрастанию значень зніму вверху, а кожен кожен годинний стілець по ворастанию
значень сверху вниз. Так само ваша програма має значну функцію виводу даного списка на екрані. При виводі, внізуйте
кожне пардо, довге виводите сумму елементів цього стовпця. Що можна використовувати:
для створення списка використовувати ТОЛЬКО 'розуміння списку' і генератор випадкових чисел. Діапазон випадкових чисел
 для заповнення списку від 1 до 50. Список необхідний для створення однорідного вироблення.
Можно використовувати ТОЛЬКО ДВА списка. Перший цей двомірний список розміщення МхМ, другий, допоміжний, одномірний
список розміщення М. Використання інших списков (або коллекций) НЕДОПУСТИМО.
Можно використовувати ТОЛЬКО ОДНУ переменную М для зберігання розмірів списку, плюс переменних циклів для.
Для сортування можна використовувати алгоритм пузырьковой сортування. Використання встроенних функцій сортування -
НЕДОПУСТИМО (щоб і не отримало їх використання)!
Повторне включення ТОЛЬКО ДВЕ функцій: функціонування сортування (за правильним описанням вище) та функція виводу на
 екран. Задача вважає решённою верно при умові задоволення всіх вимог. Аккуратний вивод на екрані - приветствуется.
 """


from random import randint


def bubble_sort(mat, lst):

    for i in range(len(lst) - 1):
        for j in range(len(lst) - 1 - i):
            if lst[j] > lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
                for k in range(len(mat)):
                    mat[k][j], mat[k][j+1] = mat[k][j+1], mat[k][j]

    for i in range(len(mat[0])):
        if i % 2:
            for k in range(len(mat) - 1):
                for j in range(len(mat) - k - 1):
                    if mat[j][i] > mat[j + 1][i]:
                        mat[j][i], mat[j + 1][i] = mat[j + 1][i], mat[j][i]
        else:
            for k in range(len(mat) - 1):
                for j in range(len(mat) - k - 1):
                    if mat[j][i] < mat[j + 1][i]:
                        mat[j][i], mat[j + 1][i] = mat[j + 1][i], mat[j][i]

    return mat, lst


def print_result(mat, lst):
    for i in range(len(mat)):
        for k in range(len(mat[i])):
            print('{0:>{1}}'.format(str(mat[i][k]), len(str(lst[k]))), end=' ')
        print()
    for k in lst:
        print(k, end=' ')
    print()


m = int(input('Введите размер матрицы М: '))
mat = [[randint(10, 50) for k in range(m)] for i in range(m)]
listSum = [sum(lst) for lst in mat]
print("\nДо сортировки\n")
print_result(mat, listSum)
mat, lst = bubble_sort(mat, listSum)
print("\nПосле сортировки\n")
print_result(mat, listSum)
